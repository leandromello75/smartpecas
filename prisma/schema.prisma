// =============================================================================
// SmartPeças ERP - Schema Prisma
// =============================================================================
// Versão: 1.0.0
// Data: 19/06/2025
//
// Descrição: Schema de banco de dados para o SmartPeças ERP, utilizando
// uma arquitetura multi-tenant com múltiplos schemas no PostgreSQL.
// =============================================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // ✅ ADICIONAMOS um schema "placeholder" para validação do build.
  schemas  = ["public", "tenant_template"] 
}

// =============================================================================
// === Modelos GLOBAIS (vivem no schema "public") ===
// =============================================================================

model Tenant {
  id         String      @id @default(uuid())
  name       String      @unique
  schema     String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  adminUsers AdminUser[]

  @@map("tenants")
  @@schema("public")
}

model AdminUser {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String?  // ✅ ADICIONADO
  isActive  Boolean  @default(true) // ✅ ADICIONADO
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])

  @@map("admin_users")
  @@schema("public")
}
// =============================================================================
// === Modelos ESPECÍFICOS DO TENANT (mapeados para o schema placeholder) ===
// =============================================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("users")
  @@schema("tenant_template") // ✅ ADICIONADO
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  sku         String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@map("products")
  @@schema("tenant_template") // ✅ ADICIONADO
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("customers")
  @@schema("tenant_template") // ✅ ADICIONADO
}

model Order {
  id          String      @id @default(uuid())
  orderDate   DateTime    @default(now())
  totalAmount Decimal     @db.Decimal(10, 2)
  status      String      @default("pending")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
  @@schema("tenant_template") // ✅ ADICIONADO
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@unique([orderId, productId])
  @@schema("tenant_template") // ✅ ADICIONADO
} 
