// =============================================================================
// SmartPeças ERP - Schema Prisma (Modelos Públicos)
// =============================================================================
// Versão: 2.0
// Data: 21/06/2025
//
// Descrição: Define os modelos globais que vivem no schema 'public'.
// =============================================================================

generator client {
  provider = "prisma-client-js"
  // ✅ NOVO CAMINHO EXPLÍCITO: O cliente público agora será gerado aqui.
  output   = "../backend/src/generated/public-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Modelos Reais deste Schema ===
model Tenant {
  id            String    @id @default(uuid())
  name          String
  schemaUrl     String    @unique @map("schema_url")
  cnpj          String?   @unique
  isActive      Boolean   @default(true)
  billingStatus String    @default("ACTIVE")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  adminUsers    AdminUser[]

  users       User[]
  products    Product[]
  customers   Customer[]
  orders      Order[]

  @@map("tenants")
}

model AdminUser {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String?  @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@map("admin_users")
}


// === Contratos / Stubs de Modelos Externos ===
// Adicionamos definições mínimas para que as relações acima funcionem.
model User {
  id String @id
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  orders Order[]
}

model Product {
  id String @id
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  orderItems OrderItem[]
}

model Customer {
  id String @id
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id])
  orders Order[]
}

model Order {
  id String @id
  tenantId String
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
  userId String
  customer Customer @relation(fields: [customerId], references: [id])
  customerId String
  items OrderItem[]
}

model OrderItem {
  id String @id
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
  product Product @relation(fields: [productId], references: [id])
  productId String
}
