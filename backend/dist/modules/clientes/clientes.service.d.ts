import { Cache } from 'cache-manager';
import { PrismaService } from '../../prisma/prisma.service';
import { CreateClienteDto, UpdateClienteDto, ConsultarClienteDto, ClienteResponseDto, ConsultarCnpjDto, ConsultarCepDto, EstatisticasResumoDto } from './dto/cliente.dto';
import { CnpjApiService } from './integracoes/cnpj-api.service';
import { CepApiService } from './integracoes/cep-api.service';
import { DocumentoValidatorService } from './validacoes/documento-validator.service';
import { UnicidadeValidatorService } from './validacoes/unicidade-validator.service';
import { AuditoriaService } from './auditoria/auditoria.service';
import { IntegridadeService } from './validacoes/integridade.service';
import { TenantThrottlerService } from './throttling/tenant-throttler.service';
import { IdempotencyService } from './auditoria/idempotency.service';
export declare class ClientesService {
    private readonly prisma;
    private readonly cnpjApi;
    private readonly cepApi;
    private readonly docValidator;
    private readonly unicidadeValidator;
    private readonly auditoriaService;
    private readonly integridadeService;
    private readonly tenantThrottler;
    private cacheManager;
    private readonly idempotencyService;
    private readonly logger;
    private readonly ORDENACAO_PERMITIDA;
    private readonly CACHE_TTL;
    private readonly CACHE_TTL_LONGO;
    private readonly operationCounter;
    private readonly operationDuration;
    private readonly cacheHitCounter;
    constructor(prisma: PrismaService, cnpjApi: CnpjApiService, cepApi: CepApiService, docValidator: DocumentoValidatorService, unicidadeValidator: UnicidadeValidatorService, auditoriaService: AuditoriaService, integridadeService: IntegridadeService, tenantThrottler: TenantThrottlerService, cacheManager: Cache, idempotencyService: IdempotencyService);
    criar(tenantId: string, dto: CreateClienteDto, usuario?: any, idemKey?: string): Promise<ClienteResponseDto>;
    buscarPorId(tenantId: string, id: string): Promise<ClienteResponseDto>;
    buscarPorDocumento(tenantId: string, documento: string): Promise<ClienteResponseDto | null>;
    listar(tenantId: string, filtros: ConsultarClienteDto): Promise<{}>;
    buscarTextoCompleto(tenantId: string, termo: string, limite?: number): Promise<{}>;
    atualizar(tenantId: string, id: string, dto: UpdateClienteDto, usuario?: any): Promise<ClienteResponseDto>;
    desativar(tenantId: string, id: string, usuario?: any): Promise<void>;
    reativar(tenantId: string, id: string, usuario?: any): Promise<void>;
    alterarStatusInadimplencia(tenantId: string, id: string, inadimplente: boolean, usuario?: any): Promise<void>;
    consultarCnpj(dto: ConsultarCnpjDto, tenantId?: string): Promise<{} | undefined>;
    consultarCep(dto: ConsultarCepDto, tenantId?: string): Promise<{} | undefined>;
    criarClienteComCnpj(tenantId: string, cnpj: string, meta: Partial<CreateClienteDto>, usuario?: any, idemKey?: string): Promise<ClienteResponseDto>;
    obterEstatisticasResumo(tenantId: string): Promise<EstatisticasResumoDto>;
    private montarFiltros;
    private invalidarCacheCliente;
}
